{"version":3,"sources":["components/Header.tsx","models/Question.ts","components/SimpleSlide.tsx","components/SimpleFade.tsx","components/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","title","classes","AppBar","position","Toolbar","Typography","className","questions","questionNumber","imageFileName","theme","createStyles","root","wrapper","paper","zIndex","margin","spacing","svg","width","height","polygon","fill","palette","common","white","stroke","divider","strokeWidth","SimpleSlide","props","React","useState","checked","setChecked","FormControlLabel","control","Switch","onChange","prev","label","Slide","direction","in","timeout","mountOnEnter","unmountOnExit","Paper","elevation","src","process","alt","SimpleFade","Fade","Home","useTheme","isLoading","questionsInfo","ThemeProvider","square","style","Grid","container","justify","item","Backdrop","open","CircularProgress","color","marginLeft","alignItems","map","question","index","directionNumber","directionText","key","App","createMuiTheme","type","primary","main","secondary","basename","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yXAiBMA,EAAYC,aAAW,iBAAO,CAClCC,iBAAkB,CAChBC,KAAM,OAmCKC,EAzBiB,SAAC,GAAyC,EAAvCC,WAAuC,EAA3BC,cAA4B,IAAbC,EAAY,EAAZA,MACtDC,EAAUR,IAChB,OACE,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,UAAWL,EAAQN,kBAAmBK,MCd3CO,EAbe,CAC5B,CAAEC,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,EAAGC,cAAe,MACpC,CAAED,eAAgB,GAAIC,cAAe,O,6CCVjChB,EAAYC,aAAW,SAACgB,GAAD,OAC3BC,YAAa,CACXC,KAAM,GAINC,QAAS,GAGTC,MAAO,CACLC,OAAQ,EACRZ,SAAU,WACVa,OAAQN,EAAMO,QAAQ,IAExBC,IAAK,CACHC,MAAO,IACPC,OAAQ,KAEVC,QAAS,CACPC,KAAMZ,EAAMa,QAAQC,OAAOC,MAC3BC,OAAQhB,EAAMa,QAAQI,QACtBC,YAAa,QAkDJC,EAxCiC,SAACC,GAC/C,IAAM7B,EAAUR,IAD2D,EAE7CsC,IAAMC,UAAS,GAF8B,mBAEpEC,EAFoE,KAE3DC,EAF2D,KAQ3E,OACE,yBAAK5B,UAAWL,EAAQW,MACtB,yBAAKN,UAAWL,EAAQY,SACtB,kBAACsB,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAQJ,QAASA,EAASK,SARtB,WACnBJ,GAAW,SAACK,GAAD,OAAWA,QAQhBC,MAAOP,EAAU,OAAS,SAE5B,kBAACQ,EAAA,EAAD,CACEC,UAAWZ,EAAMY,UACjBC,GAAIV,EACJW,QAAS,IACTC,cAAY,EACZC,eAAa,GAEb,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAG1C,UAAWL,EAAQa,OAOtC,yBACEmC,IAAG,UAAKC,qBAAL,mBAAsCpB,EAAMrB,cAA5C,QACH0C,IAAKrB,EAAMrB,qB,SC7DnBhB,EAAYC,aAAW,SAACgB,GAAD,OAC3BC,YAAa,CACXC,KAAM,GAINC,QAAS,GAGTC,MAAO,CACLC,OAAQ,EACRZ,SAAU,WACVa,OAAQN,EAAMO,QAAQ,IAExBC,IAAK,CACHC,MAAO,IACPC,OAAQ,KAEVC,QAAS,CACPC,KAAMZ,EAAMa,QAAQC,OAAOC,MAC3BC,OAAQhB,EAAMa,QAAQI,QACtBC,YAAa,QA4CJwB,EAlC+B,SAACtB,GAC7C,IAAM7B,EAAUR,IADuC,EAEzBsC,IAAMC,UAAS,GAFU,mBAEhDC,EAFgD,KAEvCC,EAFuC,KAQvD,OACE,yBAAK5B,UAAWL,EAAQW,MACtB,yBAAKN,UAAWL,EAAQY,SACtB,kBAACsB,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAQJ,QAASA,EAASK,SARtB,WACnBJ,GAAW,SAACK,GAAD,OAAWA,QAQhBC,MAAOP,EAAU,OAAS,SAE5B,kBAACoB,EAAA,EAAD,CAAMV,GAAIV,EAASW,QAAS,IAAMC,cAAY,EAACC,eAAa,GAC1D,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAG1C,UAAWL,EAAQa,OAOtC,yBACEmC,IAAG,UAAKC,qBAAL,mBAAsCpB,EAAMrB,cAA5C,QACH0C,IAAKrB,EAAMrB,qBCyEV6C,EAnGe,SAAC,GAAmC,IAAjCxD,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACrCW,EAAQ6C,cADiD,EAI3CvB,oBAAS,GAAtBwB,EAJwD,sBAMvCxB,mBAAwBzB,GAAzCkD,EANwD,oBAQ/D,OACE,kBAACC,EAAA,EAAD,CAAehD,MAAOA,GACpB,kBAACqC,EAAA,EAAD,CAAOC,UAAW,EAAGW,QAAM,EAACC,MAAO,CAAExC,OAAQ,UAC3C,kBAACyC,EAAA,EAAD,CAAMC,WAAS,EAACpB,UAAU,SAASqB,QAAQ,SAAS9C,QAAS,GAC3D,kBAAC4C,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,EAAD,CACEhE,MAAM,oBACNF,WAAYA,EACZC,cAAeA,KAGlByD,EACC,kBAACS,EAAA,EAAD,CAAUC,MAAM,GACd,kBAACC,EAAA,EAAD,CAAkBC,MAAM,aAG1B,oCACE,kBAACP,EAAA,EAAD,CAAMD,MAAO,CAAES,WAAY,KAA3B,2DAGA,kBAACR,EAAA,EAAD,CACED,MAAO,CAAE5C,OAAQ,cACjBgD,MAAI,EACJF,WAAS,EACTpB,UAAU,SACVzB,QAAS,EACT8C,QAAQ,eACRO,WAAW,UAEVb,EAAcc,KAAI,SAACC,EAAUC,GAC5B,IAAMC,EAAkBD,EAAQ,EAE5BE,EAAkC,OAkBtC,OAhBwB,IAApBD,IACFC,EAAgB,QAGM,IAApBD,IACFC,EAAgB,SAGM,IAApBD,IACFC,EAAgB,QAGM,IAApBD,IACFC,EAAgB,QAIhB,kBAACd,EAAA,EAAD,CACEG,MAAI,EACJF,WAAS,EACTc,IAAKH,EACLxD,QAAS,EACT8C,QAAQ,cAGR,kBAACF,EAAA,EAAD,CAAMG,MAAI,GAAV,IAAaQ,EAAShE,gBACtB,kBAACqD,EAAA,EAAD,CAAMG,MAAI,GAMPS,EAAQ,IAAM,EACb,kBAAC,EAAD,CACEhE,cAAe+D,EAAS/D,cACxBiC,UAAWiC,IAGb,kBAAC,EAAD,CACElE,cAAe+D,EAAS/D,cACxBiC,UAAWiC,eCxExBE,EAzCO,WAAO,IAAD,EACU7C,oBAAS,GADnB,mBACnBlC,EADmB,KACPC,EADO,KAGpBW,EAAQoE,YAAe,CAC3BvD,QAAS,CACPwD,KAAMjF,EAAa,OAAS,QAC5BkF,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cAKZ,OACE,kBAACvB,EAAA,EAAD,CAAehD,MAAOA,GACpB,kBAAC,IAAD,CAAeyE,SAAUjC,sBACvB,kBAAC,IAAD,KAEE,kBAAC,IAAD,CACEkC,KAAK,IACLC,OAAK,EACLC,OAAQ,kBACN,kBAAC,EAAD,CAAMxF,WAAYA,EAAYC,cAAeA,OAKjD,kBAAC,IAAD,CACEqF,KAAK,IACLE,OAAQ,kBACN,kBAAC,EAAD,CAAMxF,WAAYA,EAAYC,cAAeA,WC3BvCwF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASN,OAGP,kBAAC,EAAD,MACAO,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2337f027.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  // Switch,\r\n  // Paper,\r\n  // IconButton,\r\n  // Button,\r\n} from \"@material-ui/core\";\r\n// import HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\n// import HomeIcon from \"@material-ui/icons/Home\";\r\n// import PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n// import { Link } from \"react-router-dom\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n  title: string;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode, title }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>{title}</Typography>\r\n        {/* <Button component={Link} to=\"/\" size=\"small\">\r\n          <HomeIcon />\r\n        </Button>\r\n        <Button size=\"small\" component={Link} to={\"/editgigdetails/\"}>\r\n          <PlaylistAddIcon />\r\n        </Button> */}\r\n\r\n        {/* <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        /> */}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","interface Question {\r\n  questionNumber: number;\r\n  imageFileName: string;\r\n}\r\n\r\nexport type QuestionsInfo = Question[];\r\n\r\nconst questions: Question[] = [\r\n  { questionNumber: 1, imageFileName: \"B1\" },\r\n  { questionNumber: 2, imageFileName: \"C1\" },\r\n  { questionNumber: 3, imageFileName: \"D1\" },\r\n  { questionNumber: 4, imageFileName: \"E1\" },\r\n  { questionNumber: 5, imageFileName: \"F1\" },\r\n  { questionNumber: 6, imageFileName: \"G1\" },\r\n  { questionNumber: 7, imageFileName: \"O1\" },\r\n  { questionNumber: 8, imageFileName: \"S1\" },\r\n  { questionNumber: 9, imageFileName: \"S2\" },\r\n  { questionNumber: 10, imageFileName: \"T1\" },\r\n];\r\n\r\nexport default questions;\r\n","import React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      // height: 180,\r\n      // margin: 30,\r\n    },\r\n    wrapper: {\r\n      // width: 100 + theme.spacing(2),\r\n    },\r\n    paper: {\r\n      zIndex: 1,\r\n      position: \"relative\",\r\n      margin: theme.spacing(1),\r\n    },\r\n    svg: {\r\n      width: 100,\r\n      height: 100,\r\n    },\r\n    polygon: {\r\n      fill: theme.palette.common.white,\r\n      stroke: theme.palette.divider,\r\n      strokeWidth: 1,\r\n    },\r\n  })\r\n);\r\n\r\ninterface SimpleSlideProps {\r\n  imageFileName: string;\r\n  direction?: \"left\" | \"right\" | \"up\" | \"down\";\r\n}\r\n\r\nconst SimpleSlide: React.FC<SimpleSlideProps> = (props: SimpleSlideProps) => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const handleChange = () => {\r\n    setChecked((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.wrapper}>\r\n        <FormControlLabel\r\n          control={<Switch checked={checked} onChange={handleChange} />}\r\n          label={checked ? \"Hide\" : \"Show\"}\r\n        />\r\n        <Slide\r\n          direction={props.direction}\r\n          in={checked}\r\n          timeout={1000}\r\n          mountOnEnter\r\n          unmountOnExit\r\n        >\r\n          <Paper elevation={4} className={classes.paper}>\r\n            {/* <svg className={classes.svg}>\r\n              <polygon\r\n                points=\"0,100 50,00, 100,100\"\r\n                className={classes.polygon}\r\n              />\r\n            </svg> */}\r\n            <img\r\n              src={`${process.env.PUBLIC_URL}/images/${props.imageFileName}.png`}\r\n              alt={props.imageFileName}\r\n            ></img>\r\n          </Paper>\r\n        </Slide>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleSlide;\r\n","import React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// import Slide from \"@material-ui/core/Slide\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Fade } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      // height: 180,\r\n      // margin: 30,\r\n    },\r\n    wrapper: {\r\n      // width: 100 + theme.spacing(2),\r\n    },\r\n    paper: {\r\n      zIndex: 1,\r\n      position: \"relative\",\r\n      margin: theme.spacing(1),\r\n    },\r\n    svg: {\r\n      width: 100,\r\n      height: 100,\r\n    },\r\n    polygon: {\r\n      fill: theme.palette.common.white,\r\n      stroke: theme.palette.divider,\r\n      strokeWidth: 1,\r\n    },\r\n  })\r\n);\r\n\r\ninterface SimpleFadeProps {\r\n  imageFileName: string;\r\n  direction?: \"left\" | \"right\" | \"up\" | \"down\";\r\n}\r\n\r\nconst SimpleFade: React.FC<SimpleFadeProps> = (props) => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const handleChange = () => {\r\n    setChecked((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.wrapper}>\r\n        <FormControlLabel\r\n          control={<Switch checked={checked} onChange={handleChange} />}\r\n          label={checked ? \"Hide\" : \"Show\"}\r\n        />\r\n        <Fade in={checked} timeout={1000} mountOnEnter unmountOnExit>\r\n          <Paper elevation={4} className={classes.paper}>\r\n            {/* <svg className={classes.svg}>\r\n              <polygon\r\n                points=\"0,100 50,00, 100,100\"\r\n                className={classes.polygon}\r\n              />\r\n            </svg> */}\r\n            <img\r\n              src={`${process.env.PUBLIC_URL}/images/${props.imageFileName}.png`}\r\n              alt={props.imageFileName}\r\n            ></img>\r\n          </Paper>\r\n        </Fade>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleFade;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  ThemeProvider,\r\n  // Button,\r\n  Backdrop,\r\n  CircularProgress,\r\n  // Chip,\r\n  useTheme,\r\n  // Theme,\r\n} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\n// import PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\n// import { Link } from \"react-router-dom\";\r\nimport questions from \"../models/Question\";\r\n// import { makeStyles } from \"@material-ui/styles\";\r\nimport { QuestionsInfo } from \"../models/Question\";\r\nimport SimpleSlide from \"./SimpleSlide\";\r\nimport SimpleFade from \"./SimpleFade\";\r\n\r\n// const useStyles = makeStyles<Theme>((theme) => ({\r\n//   addedTodayNonZero: {\r\n//     backgroundColor: theme.palette.success.main,\r\n//     paddingLeft: 50,\r\n//     paddingRight: 50,\r\n//     borderRadius: 5,\r\n//   },\r\n// }));\r\n\r\ntype DirectionOptions = \"left\" | \"right\" | \"up\" | \"down\";\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Home: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const theme = useTheme();\r\n  // const styles = useStyles();\r\n\r\n  const [isLoading] = useState(false);\r\n\r\n  const [questionsInfo] = useState<QuestionsInfo>(questions);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100vh\" }}>\r\n        <Grid container direction=\"column\" justify=\"center\" spacing={4}>\r\n          <Grid item>\r\n            <Header\r\n              title=\"What's My Number?\"\r\n              isDarkMode={isDarkMode}\r\n              setIsDarkMode={setIsDarkMode}\r\n            />\r\n          </Grid>\r\n          {isLoading ? (\r\n            <Backdrop open={true}>\r\n              <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n          ) : (\r\n            <>\r\n              <Grid style={{ marginLeft: 30 }}>\r\n                Name the Film or TV Show that used these number plates.\r\n              </Grid>\r\n              <Grid\r\n                style={{ margin: \"0 10px 0 0\" }}\r\n                item\r\n                container\r\n                direction=\"column\"\r\n                spacing={3}\r\n                justify=\"space-evenly\"\r\n                alignItems=\"center\"\r\n              >\r\n                {questionsInfo.map((question, index) => {\r\n                  const directionNumber = index % 4;\r\n\r\n                  let directionText: DirectionOptions = \"left\";\r\n\r\n                  if (directionNumber === 0) {\r\n                    directionText = \"left\";\r\n                  }\r\n\r\n                  if (directionNumber === 1) {\r\n                    directionText = \"right\";\r\n                  }\r\n\r\n                  if (directionNumber === 2) {\r\n                    directionText = \"down\"; // don't use up\r\n                  }\r\n\r\n                  if (directionNumber === 3) {\r\n                    directionText = \"down\";\r\n                  }\r\n\r\n                  return (\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      key={index}\r\n                      spacing={2}\r\n                      justify=\"flex-start\"\r\n                      // alignItems=\"center\"\r\n                    >\r\n                      <Grid item>Q{question.questionNumber}</Grid>\r\n                      <Grid item>\r\n                        {/* <img\r\n                      src={`images/${question.imageFileName}.png`}\r\n                      alt={question.imageFileName}\r\n                    ></img> */}\r\n\r\n                        {index % 3 !== 0 ? (\r\n                          <SimpleSlide\r\n                            imageFileName={question.imageFileName}\r\n                            direction={directionText}\r\n                          ></SimpleSlide>\r\n                        ) : (\r\n                          <SimpleFade\r\n                            imageFileName={question.imageFileName}\r\n                            direction={directionText}\r\n                          ></SimpleFade>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  );\r\n                })}\r\n                {/* <pre>{JSON.stringify(questionsInfo)}}</pre> */}\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n// import { blue, green, amber, blueGrey, red, cyan, indigo, lightBlue, grey, teal } from \"@material-ui/core/colors\";\n\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport Home from \"./components/Home\";\n\nconst App: React.FC = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: isDarkMode ? \"dark\" : \"light\",\n      primary: {\n        main: \"#0b5994\",\n      },\n      secondary: {\n        main: \"#1d83c6\",\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          {/* <Route path=\"/\" exact component={Home} /> */}\n          <Route\n            path=\"/\"\n            exact\n            render={() => (\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\n            )}\n          />\n\n          {/* <Route path=\"/\" render={() => <div>404</div>} /> */}\n          <Route\n            path=\"*\"\n            render={() => (\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\n            )}\n          />\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n// https://medium.com/@matwankarmalay/create-react-app-ie11-script1002-syntax-error-how-to-get-rid-of-it-d70000c53ddf\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
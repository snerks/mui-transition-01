{"version":3,"sources":["components/Header.tsx","models/Question.ts","components/SimpleSlide.tsx","components/SimpleFade.tsx","components/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","title","classes","AppBar","position","Toolbar","Typography","className","questions","questionNumber","imageFileName","theme","createStyles","root","wrapper","paper","zIndex","margin","spacing","svg","width","height","polygon","fill","palette","common","white","stroke","divider","strokeWidth","SimpleSlide","props","React","useState","checked","setChecked","FormControlLabel","control","Switch","onChange","prev","label","Slide","direction","in","timeout","mountOnEnter","unmountOnExit","Paper","elevation","style","maxWidth","src","process","alt","SimpleFade","Fade","Home","useTheme","isLoading","questionsInfo","ThemeProvider","square","Grid","container","justify","item","Backdrop","open","CircularProgress","color","marginLeft","alignItems","map","question","index","directionNumber","directionText","key","padding","fontStyle","fontSize","App","createMuiTheme","type","primary","main","secondary","basename","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.647b6565.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  // Switch,\r\n  // Paper,\r\n  // IconButton,\r\n  // Button,\r\n} from \"@material-ui/core\";\r\n// import HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\n// import HomeIcon from \"@material-ui/icons/Home\";\r\n// import PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n// import { Link } from \"react-router-dom\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n  title: string;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode, title }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>{title}</Typography>\r\n        {/* <Button component={Link} to=\"/\" size=\"small\">\r\n          <HomeIcon />\r\n        </Button>\r\n        <Button size=\"small\" component={Link} to={\"/editgigdetails/\"}>\r\n          <PlaylistAddIcon />\r\n        </Button> */}\r\n\r\n        {/* <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        /> */}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","interface Question {\r\n  questionNumber: number;\r\n  imageFileName: string;\r\n}\r\n\r\nexport type QuestionsInfo = Question[];\r\n\r\nconst questions: Question[] = [\r\n  { questionNumber: 1, imageFileName: \"B1\" },\r\n  { questionNumber: 2, imageFileName: \"C1\" },\r\n  { questionNumber: 3, imageFileName: \"D1\" },\r\n  { questionNumber: 4, imageFileName: \"E1\" },\r\n  { questionNumber: 5, imageFileName: \"F1\" },\r\n  { questionNumber: 6, imageFileName: \"G1\" },\r\n  { questionNumber: 7, imageFileName: \"O1\" },\r\n  { questionNumber: 8, imageFileName: \"S1\" },\r\n  { questionNumber: 9, imageFileName: \"S2\" },\r\n  { questionNumber: 10, imageFileName: \"T1\" },\r\n];\r\n\r\nexport default questions;\r\n","import React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      // height: 180,\r\n      // margin: 30,\r\n    },\r\n    wrapper: {\r\n      // width: 100 + theme.spacing(2),\r\n    },\r\n    paper: {\r\n      zIndex: 1,\r\n      position: \"relative\",\r\n      margin: theme.spacing(1),\r\n    },\r\n    svg: {\r\n      width: 100,\r\n      height: 100,\r\n    },\r\n    polygon: {\r\n      fill: theme.palette.common.white,\r\n      stroke: theme.palette.divider,\r\n      strokeWidth: 1,\r\n    },\r\n  })\r\n);\r\n\r\ninterface SimpleSlideProps {\r\n  imageFileName: string;\r\n  direction?: \"left\" | \"right\" | \"up\" | \"down\";\r\n}\r\n\r\nconst SimpleSlide: React.FC<SimpleSlideProps> = (props: SimpleSlideProps) => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const handleChange = () => {\r\n    setChecked((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.wrapper}>\r\n        <FormControlLabel\r\n          control={<Switch checked={checked} onChange={handleChange} />}\r\n          label={checked ? \"Hide\" : \"Show\"}\r\n        />\r\n        <Slide\r\n          direction={props.direction}\r\n          in={checked}\r\n          timeout={1000}\r\n          mountOnEnter\r\n          unmountOnExit\r\n        >\r\n          <Paper elevation={4} className={classes.paper}>\r\n            {/* <svg className={classes.svg}>\r\n              <polygon\r\n                points=\"0,100 50,00, 100,100\"\r\n                className={classes.polygon}\r\n              />\r\n            </svg> */}\r\n            <img\r\n              style={{ maxWidth: 250 }}\r\n              src={`${process.env.PUBLIC_URL}/images/${props.imageFileName}.png`}\r\n              alt={props.imageFileName}\r\n            ></img>\r\n          </Paper>\r\n        </Slide>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleSlide;\r\n","import React from \"react\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// import Slide from \"@material-ui/core/Slide\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Fade } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      // height: 180,\r\n      // margin: 30,\r\n    },\r\n    wrapper: {\r\n      // width: 100 + theme.spacing(2),\r\n    },\r\n    paper: {\r\n      zIndex: 1,\r\n      position: \"relative\",\r\n      margin: theme.spacing(1),\r\n    },\r\n    svg: {\r\n      width: 100,\r\n      height: 100,\r\n    },\r\n    polygon: {\r\n      fill: theme.palette.common.white,\r\n      stroke: theme.palette.divider,\r\n      strokeWidth: 1,\r\n    },\r\n  })\r\n);\r\n\r\ninterface SimpleFadeProps {\r\n  imageFileName: string;\r\n  direction?: \"left\" | \"right\" | \"up\" | \"down\";\r\n}\r\n\r\nconst SimpleFade: React.FC<SimpleFadeProps> = (props) => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const handleChange = () => {\r\n    setChecked((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.wrapper}>\r\n        <FormControlLabel\r\n          control={<Switch checked={checked} onChange={handleChange} />}\r\n          label={checked ? \"Hide\" : \"Show\"}\r\n        />\r\n        <Fade in={checked} timeout={1000} mountOnEnter unmountOnExit>\r\n          <Paper elevation={4} className={classes.paper}>\r\n            {/* <svg className={classes.svg}>\r\n              <polygon\r\n                points=\"0,100 50,00, 100,100\"\r\n                className={classes.polygon}\r\n              />\r\n            </svg> */}\r\n            <img\r\n              style={{ maxWidth: 250 }}\r\n              src={`${process.env.PUBLIC_URL}/images/${props.imageFileName}.png`}\r\n              alt={props.imageFileName}\r\n            ></img>\r\n          </Paper>\r\n        </Fade>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleFade;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  ThemeProvider,\r\n  // Button,\r\n  Backdrop,\r\n  CircularProgress,\r\n  // Chip,\r\n  useTheme,\r\n  Switch,\r\n  TextField,\r\n  // Theme,\r\n} from \"@material-ui/core\";\r\nimport Header from \"./Header\";\r\n// import { blue } from \"@material-ui/core/colors\";\r\n// import PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\n// import { Link } from \"react-router-dom\";\r\nimport questions from \"../models/Question\";\r\n// import { makeStyles } from \"@material-ui/styles\";\r\nimport { QuestionsInfo } from \"../models/Question\";\r\nimport SimpleSlide from \"./SimpleSlide\";\r\nimport SimpleFade from \"./SimpleFade\";\r\n\r\n// const useStyles = makeStyles<Theme>((theme) => ({\r\n//   addedTodayNonZero: {\r\n//     backgroundColor: theme.palette.success.main,\r\n//     paddingLeft: 50,\r\n//     paddingRight: 50,\r\n//     borderRadius: 5,\r\n//   },\r\n// }));\r\n\r\ntype DirectionOptions = \"left\" | \"right\" | \"up\" | \"down\";\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Home: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const theme = useTheme();\r\n  // const styles = useStyles();\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  // const [isActive, setIsActive] = useState(password === \"withnail\");\r\n  const [isLoading] = useState(false);\r\n\r\n  const [questionsInfo] = useState<QuestionsInfo>(questions);\r\n\r\n  // const isActive = password === \"ecumenical\";\r\n  const isActive = true;\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper elevation={0} square style={{ height: \"100vh\" }}>\r\n        <Grid container direction=\"column\" justify=\"center\" spacing={4}>\r\n          <Grid item>\r\n            <Header\r\n              title=\"What's My Number?\"\r\n              isDarkMode={isDarkMode}\r\n              setIsDarkMode={setIsDarkMode}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            {/* <Switch\r\n              checked={isActive}\r\n              onChange={() => setIsActive(!isActive)}\r\n            /> */}\r\n            {/* <TextField\r\n              type=\"password\"\r\n              placeholder=\"magic word?\"\r\n              style={{ marginLeft: 10 }}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            /> */}\r\n          </Grid>\r\n          {isLoading ? (\r\n            <Backdrop open={true}>\r\n              <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n          ) : (\r\n              isActive && (\r\n                <>\r\n                  <Grid style={{ marginLeft: 30 }}>\r\n                    Name the Film or TV Show that used these number plates.\r\n                </Grid>\r\n                  <Grid\r\n                    style={{ margin: \"0 10px 0 0\" }}\r\n                    item\r\n                    container\r\n                    direction=\"column\"\r\n                    spacing={3}\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    {questionsInfo.map((question, index) => {\r\n                      const directionNumber = index % 4;\r\n\r\n                      let directionText: DirectionOptions = \"left\";\r\n\r\n                      if (directionNumber === 0) {\r\n                        directionText = \"left\";\r\n                      }\r\n\r\n                      if (directionNumber === 1) {\r\n                        directionText = \"right\";\r\n                      }\r\n\r\n                      if (directionNumber === 2) {\r\n                        directionText = \"down\"; // don't use up\r\n                      }\r\n\r\n                      if (directionNumber === 3) {\r\n                        directionText = \"down\";\r\n                      }\r\n\r\n                      return (\r\n                        <Grid\r\n                          item\r\n                          container\r\n                          key={index}\r\n                          spacing={2}\r\n                          justify=\"flex-start\"\r\n                        // alignItems=\"center\"\r\n                        >\r\n                          <Grid item>Q{question.questionNumber}</Grid>\r\n                          <Grid item>\r\n                            {/* <img\r\n                      src={`images/${question.imageFileName}.png`}\r\n                      alt={question.imageFileName}\r\n                    ></img> */}\r\n\r\n                            {index % 3 !== 0 ? (\r\n                              <SimpleSlide\r\n                                imageFileName={question.imageFileName}\r\n                                direction={directionText}\r\n                              ></SimpleSlide>\r\n                            ) : (\r\n                                <SimpleFade\r\n                                  imageFileName={question.imageFileName}\r\n                                  direction={directionText}\r\n                                ></SimpleFade>\r\n                              )}\r\n                          </Grid>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                    {/* <pre>{JSON.stringify(questionsInfo)}}</pre> */}\r\n                  </Grid>\r\n                  <Grid item style={{ padding: 30 }}>\r\n                    <div>\r\n                      Image Credit\r\n                    </div>\r\n\r\n                    <div>\r\n                      <span style={{ fontStyle: \"italic\", fontSize: 9 }}>https://www.mentalfloss.com/article/78594/cruise-through-colorful-history-famous-fictional-license-plates\r\n                      </span>\r\n                    </div>\r\n                  </Grid>\r\n                </>\r\n              )\r\n            )}\r\n        </Grid>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n// import { blue, green, amber, blueGrey, red, cyan, indigo, lightBlue, grey, teal } from \"@material-ui/core/colors\";\r\n\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport Home from \"./components/Home\";\r\n\r\nconst App: React.FC = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: isDarkMode ? \"dark\" : \"light\",\r\n      primary: {\r\n        main: \"#0b5994\",\r\n      },\r\n      secondary: {\r\n        main: \"#1d83c6\",\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          {/* <Route path=\"/\" exact component={Home} /> */}\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n\r\n          {/* <Route path=\"/\" render={() => <div>404</div>} /> */}\r\n          <Route\r\n            path=\"*\"\r\n            render={() => (\r\n              <Home isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"react-app-polyfill/ie11\";\r\nimport \"react-app-polyfill/stable\";\r\n// https://medium.com/@matwankarmalay/create-react-app-ie11-script1002-syntax-error-how-to-get-rid-of-it-d70000c53ddf\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  // </React.StrictMode>,\r\n  <App />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}